from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config import delete_mailing_router, broadcast_router, ru
from products.bot.handlers.bot_commands import get_lang, admins, get_all_user
from products.bot.keyboards.kb import menu_kb, product_back_to_category
from products.bot.states import MailingState

list_message_id = []


@delete_mailing_router.message(Command("delete_mailing"))
async def delete_mailing(message: Message):
    user_id = message.from_user.id
    lang = await get_lang(user_id)

    if user_id not in admins:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", reply_markup=menu_kb(lang))
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    messages_to_delete = list_message_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ list_message_id –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ

    if not messages_to_delete:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=menu_kb(lang))
        return

    all_users = await get_all_user()
    success = 0
    unsuccess = 0
    errors = []

    for user in all_users:
        for msg_id in messages_to_delete:
            try:
                await message.bot.delete_message(chat_id=user.user_tg_id, message_id=msg_id)
                success += 1
            except Exception as e:
                unsuccess += 1
                errors.append(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_tg_id}: {str(e)}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    list_message_id.clear()

    result_message = f"–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n" \
                     f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {success}\n" \
                     f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {unsuccess}"

    if errors:
        result_message += "\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫:"
        for error in errors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º–∏ 10 –æ—à–∏–±–∫–∞–º–∏
            result_message += f"\n- {error}"
        if len(errors) > 10:
            result_message += f"\n... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫."

    await message.answer(result_message, reply_markup=menu_kb(lang))


@broadcast_router.message(MailingState.mailing)
async def mailing_admin(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_lang(user_id)
    if user_id in admins:
        if message.text == ru['inline_keyboard_button']['back']:
            await message.bot.send_message(message.from_user.id, "üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=menu_kb(lang))
            await state.clear()
            return

        all_users = await get_all_user()
        success = 0
        unsuccess = 0
        global list_message_id
        list_message_id = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π

        for i in all_users:
            try:
                message_id = await message.bot.copy_message(chat_id=i.user_tg_id, from_chat_id=message.from_user.id,
                                                            message_id=message.message_id,
                                                            reply_markup=message.reply_markup)
                success += 1
                list_message_id.append((i.user_tg_id, message_id.message_id))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É (user_id, message_id)
            except:
                unsuccess += 1

        await message.bot.send_message(message.from_user.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                                             f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                                                             f"–ù–µ—É—Å–ø–µ—à–Ω–æ: {unsuccess}",
                                       reply_markup=menu_kb(lang))
        print(list_message_id)
        await state.clear()
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
                             reply_markup=menu_kb(lang=await get_lang(user_id)))


@broadcast_router.message(Command("broadcast"))
async def handle_broadcast_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in admins:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                             reply_markup=product_back_to_category("ru"))
        await state.set_state(MailingState.mailing)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–∏ÃÜ –∫–æ–º–∞–Ω–¥—ã",
                             reply_markup=menu_kb(lang=await get_lang(user_id)))
